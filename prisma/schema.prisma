// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  phone            String
  profileImage     String?
  role             Role              @default(USER)
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  accounts         Account[]
  products         Product[]
  rentalRequests   RentalRequest[]
  completedRentals CompletedRental[]

  @@map("users")
}

model Account {
  id           String    @id @default(uuid())
  provider     Provider
  email        String    @unique
  passwordHash String?   @map("password_hash")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  user         User      @relation(fields: [userId], references: [id])
  userId       String    @map("user_id")

  @@map("accounts")
}

model Product {
  id               String            @id @default(uuid())
  title            String
  description      String?
  price            Int
  status           ProductStatus     @default(PENDING)
  allowPurchase    Boolean           @default(false) @map("allow_purchase")
  imageUrls        String[]          @map("image_urls")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  owner            User              @relation(fields: [ownerId], references: [id])
  ownerId          String            @map("owner_id")
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       String?           @map("category_id")
  rentalRequests   RentalRequest[]
  completedRentals CompletedRental[]

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  products    Product[]

  @@map("categories")
}

model RentalRequest {
  id              String           @id @default(uuid())
  startDate       DateTime         @map("start_date")
  endDate         DateTime         @map("end_date")
  status          RentalStatus     @default(PENDING)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  user            User             @relation(fields: [userId], references: [id])
  userId          String           @map("user_id")
  product         Product          @relation(fields: [productId], references: [id])
  productId       String           @map("product_id")
  completedRental CompletedRental?

  @@map("rental_requests")
}

model CompletedRental {
  id              String        @id @default(uuid())
  startDate       DateTime      @map("start_date")
  endDate         DateTime      @map("end_date")
  totalPrice      Int           @map("total_price")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  user            User          @relation(fields: [userId], references: [id])
  userId          String        @map("user_id")
  product         Product       @relation(fields: [productId], references: [id])
  productId       String        @map("product_id")
  rentalRequest   RentalRequest @relation(fields: [rentalRequestId], references: [id])
  rentalRequestId String        @unique @map("rental_request_id")

  @@map("completed_rentals")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  LOCAL
  KAKAO
  GOOGLE
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum RentalStatus {
  PENDING
  APPROVED
  REJECTED
}
